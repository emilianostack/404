/*
  PROJETO SEGUIDOR DE LINHA
  Orientador: Manfred H. Junior
  Centro Universitário Católica de Santa Catarina
*/

#include <QTRSensors.h>

#define NUM_SENSORS             6
#define NUM_SAMPLES_PER_SENSOR  4
#define EMITTER_PIN             2

QTRSensorsAnalog qtra((unsigned char[]) {0, 1, 2, 3, 4, 5}, NUM_SENSORS, NUM_SAMPLES_PER_SENSOR, EMITTER_PIN);
unsigned int sensorValues[NUM_SENSORS];

float Kp = 25, Ki = 0.6, Kd = 2;
float error = 0, P = 0, I = 0, D = 0, PID_value = 0;
float previous_error = 0, previous_I = 0;
int initial_motor_speed = 80;
int outline = 0;
int line = 1;

void setup(){
  delay(500);
  Serial.begin(9600);
  delay(1000);
}


void loop(){
  qtra.read(sensorValues); 
  printValues(sensorValues);
  calculatePID();
  Serial.println();  
};


void printValues(unsigned int s[NUM_SENSORS]){    
  if((s[0]==outline) && (s[1]==outline) && (s[2]==outline) && (s[3]==outline) && (s[4]==line)){    
    error=4;
  }else if((s[0]==line)&&(s[1]==outline)&&(s[2]==outline)&&(s[4]==outline)&&(s[4]==outline)){
    error=-4;   
  }
  
  if((s[0]==outline)&&(s[1]==outline)&&(s[2]==outline)&&(s[3]==line)&&(s[4]==outline)){
      error=2;
  }else if((s[0]==outline)&&(s[1]==line)&&(s[2]==outline)&&(s[3]==outline)&&(s[4]==outline)){
    error=-2;
  }

  if((s[0]==outline)&&(s[1]==outline)&&(s[2]==line)&&(s[3]==line)&&(s[4]==outline)){
    error=1;
  }  else if((s[0]==outline)&&(s[1]==line)&&(s[2]==line)&&(s[3]==outline)&&(s[4]==outline)){
    error=-1;
  }
  if((s[1]==outline)&&(s[2]==line)&&(s[3]==outline)){
    error=0;
  }
    
};

void calculatePID(){
  P = error;
  I = I + previous_I;
  D = error-previous_error;
  PID_value = (Kp*P) + (Ki*I) + (Kd*D);
  previous_I=I;
  previous_error=error;
}
